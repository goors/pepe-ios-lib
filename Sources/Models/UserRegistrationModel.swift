//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class UserRegistrationModel: APIModel {

    public var email: String

    public var password: String

    public var firstName: String

    public var lastName: String

    public var phone: String

    public var zip: Int

    public var addressLine1: String

    public var city: String

    public var state: String

    public var latitude: Float

    public var longitude: Float

    /** file_avatar */
    public var fileAvatar: [File]

    public var about: String?

    public var addressLine2: String?

    public var allergies: Bool?

    public var webOrMobile: Bool?

    public init(email: String, password: String, firstName: String, lastName: String, phone: String, zip: Int, addressLine1: String, city: String, state: String, latitude: Float, longitude: Float, fileAvatar: [File], about: String? = nil, addressLine2: String? = nil, allergies: Bool? = nil, webOrMobile: Bool? = nil) {
        self.email = email
        self.password = password
        self.firstName = firstName
        self.lastName = lastName
        self.phone = phone
        self.zip = zip
        self.addressLine1 = addressLine1
        self.city = city
        self.state = state
        self.latitude = latitude
        self.longitude = longitude
        self.fileAvatar = fileAvatar
        self.about = about
        self.addressLine2 = addressLine2
        self.allergies = allergies
        self.webOrMobile = webOrMobile
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        email = try container.decode("email")
        password = try container.decode("password")
        firstName = try container.decode("first_name")
        lastName = try container.decode("last_name")
        phone = try container.decode("phone")
        zip = try container.decode("zip")
        addressLine1 = try container.decode("address_line_1")
        city = try container.decode("city")
        state = try container.decode("state")
        latitude = try container.decode("latitude")
        longitude = try container.decode("longitude")
        fileAvatar = try container.decodeArray("file_avatar")
        about = try container.decodeIfPresent("about")
        addressLine2 = try container.decodeIfPresent("address_line_2")
        allergies = try container.decodeIfPresent("allergies")
        webOrMobile = try container.decodeIfPresent("web_or_mobile")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(email, forKey: "email")
        try container.encode(password, forKey: "password")
        try container.encode(firstName, forKey: "first_name")
        try container.encode(lastName, forKey: "last_name")
        try container.encode(phone, forKey: "phone")
        try container.encode(zip, forKey: "zip")
        try container.encode(addressLine1, forKey: "address_line_1")
        try container.encode(city, forKey: "city")
        try container.encode(state, forKey: "state")
        try container.encode(latitude, forKey: "latitude")
        try container.encode(longitude, forKey: "longitude")
        try container.encode(fileAvatar, forKey: "file_avatar")
        try container.encodeIfPresent(about, forKey: "about")
        try container.encodeIfPresent(addressLine2, forKey: "address_line_2")
        try container.encodeIfPresent(allergies, forKey: "allergies")
        try container.encodeIfPresent(webOrMobile, forKey: "web_or_mobile")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? UserRegistrationModel else { return false }
      guard self.email == object.email else { return false }
      guard self.password == object.password else { return false }
      guard self.firstName == object.firstName else { return false }
      guard self.lastName == object.lastName else { return false }
      guard self.phone == object.phone else { return false }
      guard self.zip == object.zip else { return false }
      guard self.addressLine1 == object.addressLine1 else { return false }
      guard self.city == object.city else { return false }
      guard self.state == object.state else { return false }
      guard self.latitude == object.latitude else { return false }
      guard self.longitude == object.longitude else { return false }
      guard self.fileAvatar == object.fileAvatar else { return false }
      guard self.about == object.about else { return false }
      guard self.addressLine2 == object.addressLine2 else { return false }
      guard self.allergies == object.allergies else { return false }
      guard self.webOrMobile == object.webOrMobile else { return false }
      return true
    }

    public static func == (lhs: UserRegistrationModel, rhs: UserRegistrationModel) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
