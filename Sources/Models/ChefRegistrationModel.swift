//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ChefRegistrationModel: UserRegistrationModel {

    public var chefType: Int

    /** file_govt_id */
    public var fileGovtId: [File]

    public var middleName: String

    /** file_culinary_cert */
    public var fileCulinaryCert: [File]

    public var school: String

    public init(email: String, password: String, firstName: String, lastName: String, phone: String, zip: Int, addressLine1: String, city: String, state: String, latitude: Float, longitude: Float, fileAvatar: [File], chefType: Int, fileGovtId: [File], middleName: String, fileCulinaryCert: [File], school: String, about: String? = nil, addressLine2: String? = nil, allergies: Bool? = nil, webOrMobile: Bool? = nil) {
        self.chefType = chefType
        self.fileGovtId = fileGovtId
        self.middleName = middleName
        self.fileCulinaryCert = fileCulinaryCert
        self.school = school
        super.init(email: email, password: password, firstName: firstName, lastName: lastName, phone: phone, zip: zip, addressLine1: addressLine1, city: city, state: state, latitude: latitude, longitude: longitude, fileAvatar: fileAvatar, about: about, addressLine2: addressLine2, allergies: allergies, webOrMobile: webOrMobile)
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        chefType = try container.decode("chef_type")
        fileGovtId = try container.decodeArray("file_govt_id")
        middleName = try container.decode("middle_name")
        fileCulinaryCert = try container.decodeArray("file_culinary_cert")
        school = try container.decode("school")
        try super.init(from: decoder)
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(chefType, forKey: "chef_type")
        try container.encode(fileGovtId, forKey: "file_govt_id")
        try container.encode(middleName, forKey: "middle_name")
        try container.encode(fileCulinaryCert, forKey: "file_culinary_cert")
        try container.encode(school, forKey: "school")
        try super.encode(to: encoder)
    }

    override public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ChefRegistrationModel else { return false }
      guard self.chefType == object.chefType else { return false }
      guard self.fileGovtId == object.fileGovtId else { return false }
      guard self.middleName == object.middleName else { return false }
      guard self.fileCulinaryCert == object.fileCulinaryCert else { return false }
      guard self.school == object.school else { return false }
      return super.isEqual(to: object)
    }
}
